// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CourseVisibility.
const (
	CourseVisibilityHidden  CourseVisibility = "Hidden"
	CourseVisibilityVisible CourseVisibility = "Visible"
)

// Defines values for LessonVisibility.
const (
	LessonVisibilityHidden   LessonVisibility = "Hidden"
	LessonVisibilityUnlocked LessonVisibility = "Unlocked"
	LessonVisibilityVisible  LessonVisibility = "Visible"
)

// Course defines model for Course.
type Course struct {
	Discipline *string             `json:"discipline,omitempty"`
	FeedbackId *openapi_types.UUID `json:"feedback_id,omitempty"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	Landing    *[]interface{}      `json:"landing,omitempty"`
	Name       *string             `json:"name,omitempty"`
	ProductId  *openapi_types.UUID `json:"product_id,omitempty"`
	Visibility *CourseVisibility   `json:"visibility,omitempty"`
}

// CourseVisibility defines model for Course.Visibility.
type CourseVisibility string

// Lesson defines model for Lesson.
type Lesson struct {
	Id         *openapi_types.UUID `json:"id,omitempty"`
	Transcript *string             `json:"transcript,omitempty"`
	VideoUri   *string             `json:"video_uri,omitempty"`
	Visibility *LessonVisibility   `json:"visibility,omitempty"`
}

// LessonVisibility defines model for Lesson.Visibility.
type LessonVisibility string

// Teacher defines model for Teacher.
type Teacher struct {
	AccountID       openapi_types.UUID `json:"AccountID"`
	BankAccountUUID openapi_types.UUID `json:"BankAccountUUID"`
	ID              openapi_types.UUID `json:"ID"`
}

// PostBuyCourseJSONBody defines parameters for PostBuyCourse.
type PostBuyCourseJSONBody struct {
	CourseId openapi_types.UUID `json:"course_id"`
	UserId   openapi_types.UUID `json:"user_id"`
}

// PostBuyCourseJSONRequestBody defines body for PostBuyCourse for application/json ContentType.
type PostBuyCourseJSONRequestBody PostBuyCourseJSONBody

// PostTeachersJSONRequestBody defines body for PostTeachers for application/json ContentType.
type PostTeachersJSONRequestBody = Teacher

// PutTeachersTeacherIDJSONRequestBody defines body for PutTeachersTeacherID for application/json ContentType.
type PutTeachersTeacherIDJSONRequestBody = Teacher

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Purchase a course
	// (POST /buy-course)
	PostBuyCourse(c *gin.Context)
	// Get all courses
	// (GET /courses)
	GetCourses(c *gin.Context)
	// Get course details
	// (GET /courses/{course_id})
	GetCoursesCourseId(c *gin.Context, courseId openapi_types.UUID)
	// Get lessons for a course
	// (GET /courses/{course_id}/lessons)
	GetCoursesCourseIdLessons(c *gin.Context, courseId openapi_types.UUID)
	// Get lesson details
	// (GET /courses/{course_id}/lessons/{lesson_id})
	GetCoursesCourseIdLessonsLessonId(c *gin.Context, courseId openapi_types.UUID, lessonId openapi_types.UUID)
	// Get all teachers
	// (GET /teachers)
	GetTeachers(c *gin.Context)
	// Create a new teacher
	// (POST /teachers)
	PostTeachers(c *gin.Context)
	// Delete a teacher
	// (DELETE /teachers/{teacherID})
	DeleteTeachersTeacherID(c *gin.Context, teacherID openapi_types.UUID)
	// Get a teacher by ID
	// (GET /teachers/{teacherID})
	GetTeachersTeacherID(c *gin.Context, teacherID openapi_types.UUID)
	// Update a teacher
	// (PUT /teachers/{teacherID})
	PutTeachersTeacherID(c *gin.Context, teacherID openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostBuyCourse operation middleware
func (siw *ServerInterfaceWrapper) PostBuyCourse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostBuyCourse(c)
}

// GetCourses operation middleware
func (siw *ServerInterfaceWrapper) GetCourses(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCourses(c)
}

// GetCoursesCourseId operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseId(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "course_id", c.Param("course_id"), &courseId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCoursesCourseId(c, courseId)
}

// GetCoursesCourseIdLessons operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseIdLessons(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "course_id", c.Param("course_id"), &courseId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCoursesCourseIdLessons(c, courseId)
}

// GetCoursesCourseIdLessonsLessonId operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseIdLessonsLessonId(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "course_id", c.Param("course_id"), &courseId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "lesson_id" -------------
	var lessonId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "lesson_id", c.Param("lesson_id"), &lessonId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lesson_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCoursesCourseIdLessonsLessonId(c, courseId, lessonId)
}

// GetTeachers operation middleware
func (siw *ServerInterfaceWrapper) GetTeachers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTeachers(c)
}

// PostTeachers operation middleware
func (siw *ServerInterfaceWrapper) PostTeachers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTeachers(c)
}

// DeleteTeachersTeacherID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeachersTeacherID(c *gin.Context) {

	var err error

	// ------------- Path parameter "teacherID" -------------
	var teacherID openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "teacherID", c.Param("teacherID"), &teacherID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teacherID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTeachersTeacherID(c, teacherID)
}

// GetTeachersTeacherID operation middleware
func (siw *ServerInterfaceWrapper) GetTeachersTeacherID(c *gin.Context) {

	var err error

	// ------------- Path parameter "teacherID" -------------
	var teacherID openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "teacherID", c.Param("teacherID"), &teacherID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teacherID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTeachersTeacherID(c, teacherID)
}

// PutTeachersTeacherID operation middleware
func (siw *ServerInterfaceWrapper) PutTeachersTeacherID(c *gin.Context) {

	var err error

	// ------------- Path parameter "teacherID" -------------
	var teacherID openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "teacherID", c.Param("teacherID"), &teacherID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter teacherID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutTeachersTeacherID(c, teacherID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/buy-course", wrapper.PostBuyCourse)
	router.GET(options.BaseURL+"/courses", wrapper.GetCourses)
	router.GET(options.BaseURL+"/courses/:course_id", wrapper.GetCoursesCourseId)
	router.GET(options.BaseURL+"/courses/:course_id/lessons", wrapper.GetCoursesCourseIdLessons)
	router.GET(options.BaseURL+"/courses/:course_id/lessons/:lesson_id", wrapper.GetCoursesCourseIdLessonsLessonId)
	router.GET(options.BaseURL+"/teachers", wrapper.GetTeachers)
	router.POST(options.BaseURL+"/teachers", wrapper.PostTeachers)
	router.DELETE(options.BaseURL+"/teachers/:teacherID", wrapper.DeleteTeachersTeacherID)
	router.GET(options.BaseURL+"/teachers/:teacherID", wrapper.GetTeachersTeacherID)
	router.PUT(options.BaseURL+"/teachers/:teacherID", wrapper.PutTeachersTeacherID)
}
