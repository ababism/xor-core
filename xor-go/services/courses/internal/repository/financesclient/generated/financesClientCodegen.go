// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ProductCreate defines model for ProductCreate.
type ProductCreate struct {
	Info        string  `json:"Info"`
	IsAvailable bool    `json:"IsAvailable"`
	Name        string  `json:"Name"`
	Price       float32 `json:"Price"`
}

// ProductFilter defines model for ProductFilter.
type ProductFilter struct {
	IsAvailable *bool               `json:"IsAvailable,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	Price       *float32            `json:"Price,omitempty"`
	UUID        *openapi_types.UUID `json:"UUID,omitempty"`
}

// ProductGet defines model for ProductGet.
type ProductGet struct {
	CreatedAt     time.Time          `json:"CreatedAt"`
	Info          string             `json:"Info"`
	IsAvailable   bool               `json:"IsAvailable"`
	LastUpdatedAt time.Time          `json:"LastUpdatedAt"`
	Name          string             `json:"Name"`
	Price         float32            `json:"Price"`
	UUID          openapi_types.UUID `json:"UUID"`
}

// ProductUpdate defines model for ProductUpdate.
type ProductUpdate struct {
	Info        string             `json:"Info"`
	IsAvailable bool               `json:"IsAvailable"`
	Name        string             `json:"Name"`
	Price       float32            `json:"Price"`
	UUID        openapi_types.UUID `json:"UUID"`
}

// PostProductsListJSONBody defines parameters for PostProductsList.
type PostProductsListJSONBody = []ProductCreate

// GetProductsJSONRequestBody defines body for GetProducts for application/json ContentType.
type GetProductsJSONRequestBody = ProductFilter

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody = ProductCreate

// PutProductsJSONRequestBody defines body for PutProducts for application/json ContentType.
type PutProductsJSONRequestBody = ProductUpdate

// PostProductsListJSONRequestBody defines body for PostProductsList for application/json ContentType.
type PostProductsListJSONRequestBody = PostProductsListJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetProductsWithBody request with any body
	GetProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProducts(ctx context.Context, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsWithBody request with any body
	PostProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProducts(ctx context.Context, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProductsWithBody request with any body
	PutProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProducts(ctx context.Context, body PutProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsListWithBody request with any body
	PostProductsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsList(ctx context.Context, body PostProductsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsPriceUuids request
	GetProductsPriceUuids(ctx context.Context, uuids []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsId request
	GetProductsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProductsIdDisable request
	PutProductsIdDisable(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProducts(ctx context.Context, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProducts(ctx context.Context, body PutProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsList(ctx context.Context, body PostProductsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsPriceUuids(ctx context.Context, uuids []openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsPriceUuidsRequest(c.Server, uuids)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsIdDisable(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsIdDisableRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetProductsRequest calls the generic GetProducts builder with application/json body
func NewGetProductsRequest(server string, body GetProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetProductsRequestWithBody generates requests for GetProducts with any type of body
func NewGetProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsRequest calls the generic PostProducts builder with application/json body
func NewPostProductsRequest(server string, body PostProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProductsRequestWithBody generates requests for PostProducts with any type of body
func NewPostProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutProductsRequest calls the generic PutProducts builder with application/json body
func NewPutProductsRequest(server string, body PutProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutProductsRequestWithBody generates requests for PutProducts with any type of body
func NewPutProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProductsListRequest calls the generic PostProductsList builder with application/json body
func NewPostProductsListRequest(server string, body PostProductsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProductsListRequestWithBody generates requests for PostProductsList with any type of body
func NewPostProductsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsPriceUuidsRequest generates requests for GetProductsPriceUuids
func NewGetProductsPriceUuidsRequest(server string, uuids []openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuids", runtime.ParamLocationPath, uuids)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/price/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsIdRequest generates requests for GetProductsId
func NewGetProductsIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProductsIdDisableRequest generates requests for PutProductsIdDisable
func NewPutProductsIdDisableRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetProductsWithBodyWithResponse request with any body
	GetProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	GetProductsWithResponse(ctx context.Context, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// PostProductsWithBodyWithResponse request with any body
	PostProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsResponse, error)

	PostProductsWithResponse(ctx context.Context, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsResponse, error)

	// PutProductsWithBodyWithResponse request with any body
	PutProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProductsResponse, error)

	PutProductsWithResponse(ctx context.Context, body PutProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsResponse, error)

	// PostProductsListWithBodyWithResponse request with any body
	PostProductsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsListResponse, error)

	PostProductsListWithResponse(ctx context.Context, body PostProductsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsListResponse, error)

	// GetProductsPriceUuidsWithResponse request
	GetProductsPriceUuidsWithResponse(ctx context.Context, uuids []openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProductsPriceUuidsResponse, error)

	// GetProductsIdWithResponse request
	GetProductsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error)

	// PutProductsIdDisableWithResponse request
	PutProductsIdDisableWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutProductsIdDisableResponse, error)
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProductGet
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostProductsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsPriceUuidsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProductsPriceUuidsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsPriceUuidsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductGet
}

// Status returns HTTPResponse.Status
func (r GetProductsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProductsIdDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutProductsIdDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProductsIdDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetProductsWithBodyWithResponse request with arbitrary body returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, body GetProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// PostProductsWithBodyWithResponse request with arbitrary body returning *PostProductsResponse
func (c *ClientWithResponses) PostProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsResponse, error) {
	rsp, err := c.PostProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsResponse(rsp)
}

func (c *ClientWithResponses) PostProductsWithResponse(ctx context.Context, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsResponse, error) {
	rsp, err := c.PostProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsResponse(rsp)
}

// PutProductsWithBodyWithResponse request with arbitrary body returning *PutProductsResponse
func (c *ClientWithResponses) PutProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProductsResponse, error) {
	rsp, err := c.PutProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsResponse(rsp)
}

func (c *ClientWithResponses) PutProductsWithResponse(ctx context.Context, body PutProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsResponse, error) {
	rsp, err := c.PutProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsResponse(rsp)
}

// PostProductsListWithBodyWithResponse request with arbitrary body returning *PostProductsListResponse
func (c *ClientWithResponses) PostProductsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsListResponse, error) {
	rsp, err := c.PostProductsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsListResponse(rsp)
}

func (c *ClientWithResponses) PostProductsListWithResponse(ctx context.Context, body PostProductsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsListResponse, error) {
	rsp, err := c.PostProductsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsListResponse(rsp)
}

// GetProductsPriceUuidsWithResponse request returning *GetProductsPriceUuidsResponse
func (c *ClientWithResponses) GetProductsPriceUuidsWithResponse(ctx context.Context, uuids []openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProductsPriceUuidsResponse, error) {
	rsp, err := c.GetProductsPriceUuids(ctx, uuids, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsPriceUuidsResponse(rsp)
}

// GetProductsIdWithResponse request returning *GetProductsIdResponse
func (c *ClientWithResponses) GetProductsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error) {
	rsp, err := c.GetProductsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdResponse(rsp)
}

// PutProductsIdDisableWithResponse request returning *PutProductsIdDisableResponse
func (c *ClientWithResponses) PutProductsIdDisableWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutProductsIdDisableResponse, error) {
	rsp, err := c.PutProductsIdDisable(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsIdDisableResponse(rsp)
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProductGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProductsResponse parses an HTTP response from a PostProductsWithResponse call
func ParsePostProductsResponse(rsp *http.Response) (*PostProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutProductsResponse parses an HTTP response from a PutProductsWithResponse call
func ParsePutProductsResponse(rsp *http.Response) (*PutProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostProductsListResponse parses an HTTP response from a PostProductsListWithResponse call
func ParsePostProductsListResponse(rsp *http.Response) (*PostProductsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProductsPriceUuidsResponse parses an HTTP response from a GetProductsPriceUuidsWithResponse call
func ParseGetProductsPriceUuidsResponse(rsp *http.Response) (*GetProductsPriceUuidsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsPriceUuidsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProductsIdResponse parses an HTTP response from a GetProductsIdWithResponse call
func ParseGetProductsIdResponse(rsp *http.Response) (*GetProductsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutProductsIdDisableResponse parses an HTTP response from a PutProductsIdDisableWithResponse call
func ParsePutProductsIdDisableResponse(rsp *http.Response) (*PutProductsIdDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProductsIdDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
