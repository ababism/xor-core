// Package payout provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package payout

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// PayoutRequestCreate defines model for PayoutRequestCreate.
type PayoutRequestCreate struct {
	Amount    float32            `json:"Amount"`
	CreatedAt time.Time          `json:"CreatedAt"`
	Data      PayoutRequestData  `json:"Data"`
	Receiver  openapi_types.UUID `json:"Receiver"`
}

// PayoutRequestData defines model for PayoutRequestData.
type PayoutRequestData = map[string]interface{}

// PayoutRequestFilter defines model for PayoutRequestFilter.
type PayoutRequestFilter struct {
	Amount    *float32            `json:"Amount,omitempty"`
	CreatedAt *time.Time          `json:"CreatedAt,omitempty"`
	Receiver  *openapi_types.UUID `json:"Receiver,omitempty"`
	UUID      *openapi_types.UUID `json:"UUID,omitempty"`
}

// PayoutRequestGet defines model for PayoutRequestGet.
type PayoutRequestGet struct {
	Amount    float32            `json:"Amount"`
	CreatedAt time.Time          `json:"CreatedAt"`
	Data      PayoutRequestData  `json:"Data"`
	Receiver  openapi_types.UUID `json:"Receiver"`
	UUID      openapi_types.UUID `json:"UUID"`
}

// GetPayoutRequestsJSONRequestBody defines body for GetPayoutRequests for application/json ContentType.
type GetPayoutRequestsJSONRequestBody = PayoutRequestFilter

// PostPayoutRequestsJSONRequestBody defines body for PostPayoutRequests for application/json ContentType.
type PostPayoutRequestsJSONRequestBody = PayoutRequestCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List payout requests
	// (GET /payout-requests)
	GetPayoutRequests(c *gin.Context)
	// Create a payout request
	// (POST /payout-requests)
	PostPayoutRequests(c *gin.Context)
	// Get payout request by ID
	// (GET /payout-requests/{id})
	GetPayoutRequestsId(c *gin.Context, id openapi_types.UUID)
	// Archive a payout request
	// (PUT /payout-requests/{id}/archive)
	PutPayoutRequestsIdArchive(c *gin.Context, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPayoutRequests operation middleware
func (siw *ServerInterfaceWrapper) GetPayoutRequests(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPayoutRequests(c)
}

// PostPayoutRequests operation middleware
func (siw *ServerInterfaceWrapper) PostPayoutRequests(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPayoutRequests(c)
}

// GetPayoutRequestsId operation middleware
func (siw *ServerInterfaceWrapper) GetPayoutRequestsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPayoutRequestsId(c, id)
}

// PutPayoutRequestsIdArchive operation middleware
func (siw *ServerInterfaceWrapper) PutPayoutRequestsIdArchive(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPayoutRequestsIdArchive(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/payout-requests", wrapper.GetPayoutRequests)
	router.POST(options.BaseURL+"/payout-requests", wrapper.PostPayoutRequests)
	router.GET(options.BaseURL+"/payout-requests/:id", wrapper.GetPayoutRequestsId)
	router.PUT(options.BaseURL+"/payout-requests/:id/archive", wrapper.PutPayoutRequestsIdArchive)
}
