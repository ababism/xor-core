// Package product provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package product

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ModelUUID defines model for ModelUUID.
type ModelUUID struct {
	UUID openapi_types.UUID `json:"UUID"`
}

// ProductCreate defines model for ProductCreate.
type ProductCreate struct {
	Info        string  `json:"Info"`
	IsAvailable bool    `json:"IsAvailable"`
	Name        string  `json:"Name"`
	Price       float32 `json:"Price"`
}

// ProductFilter defines model for ProductFilter.
type ProductFilter struct {
	IsAvailable *bool               `json:"IsAvailable,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	Price       *float32            `json:"Price,omitempty"`
	UUID        *openapi_types.UUID `json:"UUID,omitempty"`
}

// ProductGet defines model for ProductGet.
type ProductGet struct {
	CreatedAt     time.Time          `json:"CreatedAt"`
	Info          string             `json:"Info"`
	IsAvailable   bool               `json:"IsAvailable"`
	LastUpdatedAt time.Time          `json:"LastUpdatedAt"`
	Name          string             `json:"Name"`
	Price         float32            `json:"Price"`
	UUID          openapi_types.UUID `json:"UUID"`
}

// ProductUpdate defines model for ProductUpdate.
type ProductUpdate struct {
	Info        string             `json:"Info"`
	IsAvailable bool               `json:"IsAvailable"`
	Name        string             `json:"Name"`
	Price       float32            `json:"Price"`
	UUID        openapi_types.UUID `json:"UUID"`
}

// PostProductListJSONBody defines parameters for PostProductList.
type PostProductListJSONBody = []ProductCreate

// GetProductJSONRequestBody defines body for GetProduct for application/json ContentType.
type GetProductJSONRequestBody = ProductFilter

// PostProductJSONRequestBody defines body for PostProduct for application/json ContentType.
type PostProductJSONRequestBody = ProductCreate

// PutProductJSONRequestBody defines body for PutProduct for application/json ContentType.
type PutProductJSONRequestBody = ProductUpdate

// PostProductListJSONRequestBody defines body for PostProductList for application/json ContentType.
type PostProductListJSONRequestBody = PostProductListJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List products
	// (GET /product)
	GetProduct(c *gin.Context)
	// Create a product
	// (POST /product)
	PostProduct(c *gin.Context)
	// Update a product
	// (PUT /product)
	PutProduct(c *gin.Context)
	// Create many products
	// (POST /product/list)
	PostProductList(c *gin.Context)
	// Get products price with discounts
	// (GET /product/price/{uuids})
	GetProductPriceUuids(c *gin.Context, uuids []openapi_types.UUID)
	// Get product by ID
	// (GET /product/{id})
	GetProductId(c *gin.Context, id openapi_types.UUID)
	// Disable a product
	// (PUT /product/{id}/disable)
	PutProductIdDisable(c *gin.Context, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetProduct operation middleware
func (siw *ServerInterfaceWrapper) GetProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProduct(c)
}

// PostProduct operation middleware
func (siw *ServerInterfaceWrapper) PostProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProduct(c)
}

// PutProduct operation middleware
func (siw *ServerInterfaceWrapper) PutProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProduct(c)
}

// PostProductList operation middleware
func (siw *ServerInterfaceWrapper) PostProductList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProductList(c)
}

// GetProductPriceUuids operation middleware
func (siw *ServerInterfaceWrapper) GetProductPriceUuids(c *gin.Context) {

	var err error

	// ------------- Path parameter "uuids" -------------
	var uuids []openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "uuids", c.Param("uuids"), &uuids)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductPriceUuids(c, uuids)
}

// GetProductId operation middleware
func (siw *ServerInterfaceWrapper) GetProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductId(c, id)
}

// PutProductIdDisable operation middleware
func (siw *ServerInterfaceWrapper) PutProductIdDisable(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProductIdDisable(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/product", wrapper.GetProduct)
	router.POST(options.BaseURL+"/product", wrapper.PostProduct)
	router.PUT(options.BaseURL+"/product", wrapper.PutProduct)
	router.POST(options.BaseURL+"/product/list", wrapper.PostProductList)
	router.GET(options.BaseURL+"/product/price/:uuids", wrapper.GetProductPriceUuids)
	router.GET(options.BaseURL+"/product/:id", wrapper.GetProductId)
	router.PUT(options.BaseURL+"/product/:id/disable", wrapper.PutProductIdDisable)
}
