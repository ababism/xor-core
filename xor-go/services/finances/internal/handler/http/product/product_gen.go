// Package product provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package product

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ProductCreate defines model for ProductCreate.
type ProductCreate struct {
	Name  string  `json:"Name"`
	Price float32 `json:"Price"`
}

// ProductFilter defines model for ProductFilter.
type ProductFilter struct {
	Name  *string             `json:"Name,omitempty"`
	Price *float32            `json:"Price,omitempty"`
	UUID  *openapi_types.UUID `json:"UUID,omitempty"`
}

// ProductGet defines model for ProductGet.
type ProductGet struct {
	CreatedAt     time.Time          `json:"CreatedAt"`
	IsAvailable   bool               `json:"IsAvailable"`
	LastUpdatedAt time.Time          `json:"LastUpdatedAt"`
	Name          string             `json:"Name"`
	Price         float32            `json:"Price"`
	UUID          openapi_types.UUID `json:"UUID"`
}

// ProductUpdate defines model for ProductUpdate.
type ProductUpdate struct {
	IsAvailable bool               `json:"IsAvailable"`
	Name        string             `json:"Name"`
	Price       float32            `json:"Price"`
	UUID        openapi_types.UUID `json:"UUID"`
}

// GetListParams defines parameters for GetList.
type GetListParams struct {
	Filter *ProductFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateParams defines parameters for Create.
type CreateParams struct {
	Model ProductCreate `form:"model" json:"model"`
}

// UpdateParams defines parameters for Update.
type UpdateParams struct {
	Model ProductUpdate `form:"model" json:"model"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List products
	// (GET /products)
	GetList(c *gin.Context, params GetListParams)
	// Create a product
	// (POST /products)
	Create(c *gin.Context, params CreateParams)
	// Update a product
	// (PUT /products)
	Update(c *gin.Context, params UpdateParams)
	// Get product by ID
	// (GET /products/{id})
	Get(c *gin.Context, id openapi_types.UUID)
	// Disable a product
	// (PUT /products/{id}/disable)
	Disable(c *gin.Context, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetList operation middleware
func (siw *ServerInterfaceWrapper) GetList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetList(c, params)
}

// Create operation middleware
func (siw *ServerInterfaceWrapper) Create(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Create(c, params)
}

// Update operation middleware
func (siw *ServerInterfaceWrapper) Update(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Update(c, params)
}

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get(c, id)
}

// Disable operation middleware
func (siw *ServerInterfaceWrapper) Disable(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Disable(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/products", wrapper.GetList)
	router.POST(options.BaseURL+"/products", wrapper.Create)
	router.PUT(options.BaseURL+"/products", wrapper.Update)
	router.GET(options.BaseURL+"/products/:id", wrapper.Get)
	router.PUT(options.BaseURL+"/products/:id/disable", wrapper.Disable)
}
