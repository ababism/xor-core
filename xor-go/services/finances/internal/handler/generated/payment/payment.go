// Package payment provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package payment

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// PaymentCreate defines model for PaymentCreate.
type PaymentCreate struct {
	Data     PaymentData        `json:"Data"`
	EndedAt  time.Time          `json:"EndedAt"`
	Receiver openapi_types.UUID `json:"Receiver"`
	Sender   openapi_types.UUID `json:"Sender"`
	Status   string             `json:"Status"`
	URL      string             `json:"URL"`
}

// PaymentData defines model for PaymentData.
type PaymentData = map[string]interface{}

// PaymentFilter defines model for PaymentFilter.
type PaymentFilter struct {
	EndedAt  *time.Time          `json:"EndedAt,omitempty"`
	Receiver *openapi_types.UUID `json:"Receiver,omitempty"`
	Sender   *openapi_types.UUID `json:"Sender,omitempty"`
	Status   *string             `json:"Status,omitempty"`
	URL      *string             `json:"URL,omitempty"`
	UUID     *openapi_types.UUID `json:"UUID,omitempty"`
}

// PaymentGet defines model for PaymentGet.
type PaymentGet struct {
	CreatedAt *time.Time          `json:"CreatedAt,omitempty"`
	Data      *PaymentData        `json:"Data,omitempty"`
	EndedAt   *time.Time          `json:"EndedAt,omitempty"`
	Receiver  *openapi_types.UUID `json:"Receiver,omitempty"`
	Sender    *openapi_types.UUID `json:"Sender,omitempty"`
	Status    *string             `json:"Status,omitempty"`
	URL       *string             `json:"URL,omitempty"`
	UUID      *openapi_types.UUID `json:"UUID,omitempty"`
}

// GetListParams defines parameters for GetList.
type GetListParams struct {
	Filter PaymentFilter `form:"filter" json:"filter"`
}

// CreateParams defines parameters for Create.
type CreateParams struct {
	Model PaymentCreate `form:"model" json:"model"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List payments
	// (GET /payments)
	GetList(c *gin.Context, params GetListParams)
	// Create a payment
	// (POST /payments)
	Create(c *gin.Context, params CreateParams)
	// Get payment by UUID
	// (GET /payments/{uuid})
	Get(c *gin.Context, uuid openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetList operation middleware
func (siw *ServerInterfaceWrapper) GetList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListParams

	// ------------- Required query parameter "filter" -------------

	if paramValue := c.Query("filter"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument filter is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetList(c, params)
}

// Create operation middleware
func (siw *ServerInterfaceWrapper) Create(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Create(c, params)
}

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(c *gin.Context) {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "uuid", c.Param("uuid"), &uuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get(c, uuid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/payments", wrapper.GetList)
	router.POST(options.BaseURL+"/payments", wrapper.Create)
	router.GET(options.BaseURL+"/payments/:uuid", wrapper.Get)
}
