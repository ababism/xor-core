// Package finance_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package finance_gen

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BankAccountCreate defines model for BankAccountCreate.
type BankAccountCreate struct {
	AccountUUID openapi_types.UUID   `json:"AccountUUID"`
	Data        BankAccountData      `json:"Data"`
	Login       string               `json:"Login"`
	Payments    []openapi_types.UUID `json:"Payments"`
}

// BankAccountData defines model for BankAccountData.
type BankAccountData = map[string]interface{}

// BankAccountFilter defines model for BankAccountFilter.
type BankAccountFilter struct {
	AccountUUID *openapi_types.UUID `json:"AccountUUID,omitempty"`
	Funds       *float32            `json:"Funds,omitempty"`
	Login       *string             `json:"Login,omitempty"`
	Status      *string             `json:"Status,omitempty"`
	UUID        *openapi_types.UUID `json:"UUID,omitempty"`
}

// BankAccountGet defines model for BankAccountGet.
type BankAccountGet struct {
	AccountUUID  openapi_types.UUID   `json:"AccountUUID"`
	CreatedAt    time.Time            `json:"CreatedAt"`
	Data         BankAccountData      `json:"Data"`
	Funds        float32              `json:"Funds"`
	LastDealAt   time.Time            `json:"LastDealAt"`
	LastUpdateAt time.Time            `json:"LastUpdateAt"`
	Login        string               `json:"Login"`
	Payments     []openapi_types.UUID `json:"Payments"`
	Status       string               `json:"Status"`
	UUID         openapi_types.UUID   `json:"UUID"`
}

// BankAccountUpdate defines model for BankAccountUpdate.
type BankAccountUpdate struct {
	AccountUUID openapi_types.UUID   `json:"AccountUUID"`
	Data        BankAccountData      `json:"Data"`
	Funds       float32              `json:"Funds"`
	LastDealAt  time.Time            `json:"LastDealAt"`
	Login       string               `json:"Login"`
	Payments    []openapi_types.UUID `json:"Payments"`
	Status      string               `json:"Status"`
	UUID        openapi_types.UUID   `json:"UUID"`
}

// DiscountCreate defines model for DiscountCreate.
type DiscountCreate struct {
	CreatedBy  openapi_types.UUID `json:"CreatedBy"`
	EndedAt    time.Time          `json:"EndedAt"`
	Percent    float32            `json:"Percent"`
	StandAlone bool               `json:"StandAlone"`
	StartedAt  time.Time          `json:"StartedAt"`
	Status     string             `json:"Status"`
}

// DiscountFilter defines model for DiscountFilter.
type DiscountFilter struct {
	CreatedBy  *openapi_types.UUID `json:"CreatedBy,omitempty"`
	Percent    *float32            `json:"Percent,omitempty"`
	StandAlone *bool               `json:"StandAlone,omitempty"`
	Status     *string             `json:"Status,omitempty"`
	UUID       *openapi_types.UUID `json:"UUID,omitempty"`
}

// DiscountGet defines model for DiscountGet.
type DiscountGet struct {
	CreatedAt    time.Time          `json:"CreatedAt"`
	CreatedBy    openapi_types.UUID `json:"CreatedBy"`
	EndedAt      time.Time          `json:"EndedAt"`
	LastUpdateAt time.Time          `json:"LastUpdateAt"`
	Percent      float32            `json:"Percent"`
	StandAlone   bool               `json:"StandAlone"`
	StartedAt    time.Time          `json:"StartedAt"`
	Status       string             `json:"Status"`
	UUID         openapi_types.UUID `json:"UUID"`
}

// DiscountUpdate defines model for DiscountUpdate.
type DiscountUpdate struct {
	CreatedBy  openapi_types.UUID `json:"CreatedBy"`
	EndedAt    time.Time          `json:"EndedAt"`
	Percent    float32            `json:"Percent"`
	StandAlone bool               `json:"StandAlone"`
	StartedAt  time.Time          `json:"StartedAt"`
	Status     string             `json:"Status"`
	UUID       openapi_types.UUID `json:"UUID"`
}

// PaymentCreate defines model for PaymentCreate.
type PaymentCreate struct {
	Data     PaymentData        `json:"Data"`
	EndedAt  time.Time          `json:"EndedAt"`
	Receiver openapi_types.UUID `json:"Receiver"`
	Sender   openapi_types.UUID `json:"Sender"`
	Status   string             `json:"Status"`
	URL      string             `json:"URL"`
}

// PaymentData defines model for PaymentData.
type PaymentData = map[string]interface{}

// PaymentFilter defines model for PaymentFilter.
type PaymentFilter struct {
	EndedAt  *time.Time          `json:"EndedAt,omitempty"`
	Receiver *openapi_types.UUID `json:"Receiver,omitempty"`
	Sender   *openapi_types.UUID `json:"Sender,omitempty"`
	Status   *string             `json:"Status,omitempty"`
	URL      *string             `json:"URL,omitempty"`
	UUID     *openapi_types.UUID `json:"UUID,omitempty"`
}

// PaymentGet defines model for PaymentGet.
type PaymentGet struct {
	CreatedAt time.Time          `json:"CreatedAt"`
	Data      PaymentData        `json:"Data"`
	EndedAt   time.Time          `json:"EndedAt"`
	Receiver  openapi_types.UUID `json:"Receiver"`
	Sender    openapi_types.UUID `json:"Sender"`
	Status    string             `json:"Status"`
	URL       string             `json:"URL"`
	UUID      openapi_types.UUID `json:"UUID"`
}

// PayoutRequestCreate defines model for PayoutRequestCreate.
type PayoutRequestCreate struct {
	Amount     float32            `json:"Amount"`
	Data       PayoutRequestData  `json:"Data"`
	ReceivedAt time.Time          `json:"ReceivedAt"`
	Receiver   openapi_types.UUID `json:"Receiver"`
}

// PayoutRequestData defines model for PayoutRequestData.
type PayoutRequestData = map[string]interface{}

// PayoutRequestFilter defines model for PayoutRequestFilter.
type PayoutRequestFilter struct {
	Amount     *float32            `json:"Amount,omitempty"`
	ReceivedAt *time.Time          `json:"ReceivedAt,omitempty"`
	Receiver   *openapi_types.UUID `json:"Receiver,omitempty"`
	UUID       *openapi_types.UUID `json:"UUID,omitempty"`
}

// PayoutRequestGet defines model for PayoutRequestGet.
type PayoutRequestGet struct {
	Amount     float32            `json:"Amount"`
	Data       PayoutRequestData  `json:"Data"`
	ReceivedAt time.Time          `json:"ReceivedAt"`
	Receiver   openapi_types.UUID `json:"Receiver"`
	UUID       openapi_types.UUID `json:"UUID"`
}

// ProductCreate defines model for ProductCreate.
type ProductCreate struct {
	Name  string  `json:"Name"`
	Price float32 `json:"Price"`
}

// ProductFilter defines model for ProductFilter.
type ProductFilter struct {
	Name  *string             `json:"Name,omitempty"`
	Price *float32            `json:"Price,omitempty"`
	UUID  *openapi_types.UUID `json:"UUID,omitempty"`
}

// ProductGet defines model for ProductGet.
type ProductGet struct {
	CreatedAt     time.Time          `json:"CreatedAt"`
	IsAvailable   bool               `json:"IsAvailable"`
	LastUpdatedAt time.Time          `json:"LastUpdatedAt"`
	Name          string             `json:"Name"`
	Price         float32            `json:"Price"`
	UUID          openapi_types.UUID `json:"UUID"`
}

// ProductUpdate defines model for ProductUpdate.
type ProductUpdate struct {
	IsAvailable bool               `json:"IsAvailable"`
	Name        string             `json:"Name"`
	Price       float32            `json:"Price"`
	UUID        openapi_types.UUID `json:"UUID"`
}

// PurchaseRequestCreate defines model for PurchaseRequestCreate.
type PurchaseRequestCreate struct {
	ReceivedAt time.Time          `json:"ReceivedAt"`
	Receiver   openapi_types.UUID `json:"Receiver"`
	Sender     openapi_types.UUID `json:"Sender"`
	WebhookURL string             `json:"WebhookURL"`
}

// PurchaseRequestFilter defines model for PurchaseRequestFilter.
type PurchaseRequestFilter struct {
	ReceivedAt *time.Time          `json:"ReceivedAt,omitempty"`
	Receiver   *openapi_types.UUID `json:"Receiver,omitempty"`
	Sender     *openapi_types.UUID `json:"Sender,omitempty"`
	UUID       *openapi_types.UUID `json:"UUID,omitempty"`
	WebhookURL *string             `json:"WebhookURL,omitempty"`
}

// PurchaseRequestGet defines model for PurchaseRequestGet.
type PurchaseRequestGet struct {
	ReceivedAt time.Time          `json:"ReceivedAt"`
	Receiver   openapi_types.UUID `json:"Receiver"`
	Sender     openapi_types.UUID `json:"Sender"`
	UUID       openapi_types.UUID `json:"UUID"`
	WebhookURL string             `json:"WebhookURL"`
}

// GetListBankAccountsParams defines parameters for GetListBankAccounts.
type GetListBankAccountsParams struct {
	Filter *BankAccountFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateBankAccountParams defines parameters for CreateBankAccount.
type CreateBankAccountParams struct {
	Model BankAccountCreate `form:"model" json:"model"`
}

// UpdateBankAccountParams defines parameters for UpdateBankAccount.
type UpdateBankAccountParams struct {
	Model BankAccountUpdate `form:"model" json:"model"`
}

// ChangeBankAccountFundsParams defines parameters for ChangeBankAccountFunds.
type ChangeBankAccountFundsParams struct {
	NewFunds float32 `form:"newFunds" json:"newFunds"`
}

// GetListDiscountsParams defines parameters for GetListDiscounts.
type GetListDiscountsParams struct {
	Filter *DiscountFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateDiscountParams defines parameters for CreateDiscount.
type CreateDiscountParams struct {
	Model DiscountCreate `form:"model" json:"model"`
}

// UpdateDiscountParams defines parameters for UpdateDiscount.
type UpdateDiscountParams struct {
	Model DiscountUpdate `form:"model" json:"model"`
}

// GetListPaymentsParams defines parameters for GetListPayments.
type GetListPaymentsParams struct {
	Filter *PaymentFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreatePaymentParams defines parameters for CreatePayment.
type CreatePaymentParams struct {
	Model PaymentCreate `form:"model" json:"model"`
}

// GetListPayoutRequestsParams defines parameters for GetListPayoutRequests.
type GetListPayoutRequestsParams struct {
	Filter *PayoutRequestFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreatePayoutRequestParams defines parameters for CreatePayoutRequest.
type CreatePayoutRequestParams struct {
	Model PayoutRequestCreate `form:"model" json:"model"`
}

// GetListProductsParams defines parameters for GetListProducts.
type GetListProductsParams struct {
	Filter *ProductFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateProductParams defines parameters for CreateProduct.
type CreateProductParams struct {
	Model ProductCreate `form:"model" json:"model"`
}

// UpdateProductParams defines parameters for UpdateProduct.
type UpdateProductParams struct {
	Model ProductUpdate `form:"model" json:"model"`
}

// GetListPurchaseRequestsParams defines parameters for GetListPurchaseRequests.
type GetListPurchaseRequestsParams struct {
	Filter *PurchaseRequestFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreatePurchaseRequestParams defines parameters for CreatePurchaseRequest.
type CreatePurchaseRequestParams struct {
	Model PurchaseRequestCreate `form:"model" json:"model"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List bank accounts
	// (GET /bank-accounts)
	GetListBankAccounts(c *gin.Context, params GetListBankAccountsParams)
	// Create a bank account
	// (POST /bank-accounts)
	CreateBankAccount(c *gin.Context, params CreateBankAccountParams)
	// Get bank account by login
	// (GET /bank-accounts/{login})
	GetBankAccount(c *gin.Context, login string)
	// Update a bank account
	// (PUT /bank-accounts/{login})
	UpdateBankAccount(c *gin.Context, login string, params UpdateBankAccountParams)
	// Change bank account funds
	// (PUT /bank-accounts/{login}/change-funds)
	ChangeBankAccountFunds(c *gin.Context, login string, params ChangeBankAccountFundsParams)
	// List discounts
	// (GET /discounts)
	GetListDiscounts(c *gin.Context, params GetListDiscountsParams)
	// Create a discount
	// (POST /discounts)
	CreateDiscount(c *gin.Context, params CreateDiscountParams)
	// Update a discount
	// (PUT /discounts)
	UpdateDiscount(c *gin.Context, params UpdateDiscountParams)
	// Get discount by ID
	// (GET /discounts/{id})
	GetDiscount(c *gin.Context, id openapi_types.UUID)
	// End a discount
	// (PATCH /discounts/{id}/end)
	EndDiscount(c *gin.Context, id openapi_types.UUID)
	// List payments
	// (GET /payments)
	GetListPayments(c *gin.Context, params GetListPaymentsParams)
	// Create a payment
	// (POST /payments)
	CreatePayment(c *gin.Context, params CreatePaymentParams)
	// Get payment by UUID
	// (GET /payments/{uuid})
	GetPayment(c *gin.Context, uuid openapi_types.UUID)
	// List payout requests
	// (GET /payout-requests)
	GetListPayoutRequests(c *gin.Context, params GetListPayoutRequestsParams)
	// Create a payout request
	// (POST /payout-requests)
	CreatePayoutRequest(c *gin.Context, params CreatePayoutRequestParams)
	// Get payout request by ID
	// (GET /payout-requests/{id})
	GetPayoutRequest(c *gin.Context, id openapi_types.UUID)
	// Archive a payout request
	// (PUT /payout-requests/{id}/archive)
	ArchivePayoutRequest(c *gin.Context, id openapi_types.UUID)
	// List products
	// (GET /products)
	GetListProducts(c *gin.Context, params GetListProductsParams)
	// Create a product
	// (POST /products)
	CreateProduct(c *gin.Context, params CreateProductParams)
	// Update a product
	// (PUT /products)
	UpdateProduct(c *gin.Context, params UpdateProductParams)
	// Get product by ID
	// (GET /products/{id})
	GetProduct(c *gin.Context, id openapi_types.UUID)
	// Disable a product
	// (PUT /products/{id}/disable)
	DisableProduct(c *gin.Context, id openapi_types.UUID)
	// List purchase requests
	// (GET /purchase-requests)
	GetListPurchaseRequests(c *gin.Context, params GetListPurchaseRequestsParams)
	// Create a purchase request
	// (POST /purchase-requests)
	CreatePurchaseRequest(c *gin.Context, params CreatePurchaseRequestParams)
	// Get purchase request by ID
	// (GET /purchase-requests/{id})
	GetPurchaseRequest(c *gin.Context, id openapi_types.UUID)
	// Archive a purchase request
	// (PUT /purchase-requests/{id}/archive)
	ArchivePurchaseRequest(c *gin.Context, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetListBankAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetListBankAccounts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListBankAccountsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetListBankAccounts(c, params)
}

// CreateBankAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateBankAccount(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateBankAccountParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBankAccount(c, params)
}

// GetBankAccount operation middleware
func (siw *ServerInterfaceWrapper) GetBankAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameter("simple", false, "login", c.Param("login"), &login)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter login: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBankAccount(c, login)
}

// UpdateBankAccount operation middleware
func (siw *ServerInterfaceWrapper) UpdateBankAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameter("simple", false, "login", c.Param("login"), &login)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter login: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateBankAccountParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateBankAccount(c, login, params)
}

// ChangeBankAccountFunds operation middleware
func (siw *ServerInterfaceWrapper) ChangeBankAccountFunds(c *gin.Context) {

	var err error

	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameter("simple", false, "login", c.Param("login"), &login)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter login: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ChangeBankAccountFundsParams

	// ------------- Required query parameter "newFunds" -------------

	if paramValue := c.Query("newFunds"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument newFunds is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "newFunds", c.Request.URL.Query(), &params.NewFunds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter newFunds: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeBankAccountFunds(c, login, params)
}

// GetListDiscounts operation middleware
func (siw *ServerInterfaceWrapper) GetListDiscounts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListDiscountsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetListDiscounts(c, params)
}

// CreateDiscount operation middleware
func (siw *ServerInterfaceWrapper) CreateDiscount(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateDiscountParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDiscount(c, params)
}

// UpdateDiscount operation middleware
func (siw *ServerInterfaceWrapper) UpdateDiscount(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDiscountParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDiscount(c, params)
}

// GetDiscount operation middleware
func (siw *ServerInterfaceWrapper) GetDiscount(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiscount(c, id)
}

// EndDiscount operation middleware
func (siw *ServerInterfaceWrapper) EndDiscount(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EndDiscount(c, id)
}

// GetListPayments operation middleware
func (siw *ServerInterfaceWrapper) GetListPayments(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListPaymentsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetListPayments(c, params)
}

// CreatePayment operation middleware
func (siw *ServerInterfaceWrapper) CreatePayment(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePaymentParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePayment(c, params)
}

// GetPayment operation middleware
func (siw *ServerInterfaceWrapper) GetPayment(c *gin.Context) {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "uuid", c.Param("uuid"), &uuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPayment(c, uuid)
}

// GetListPayoutRequests operation middleware
func (siw *ServerInterfaceWrapper) GetListPayoutRequests(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListPayoutRequestsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetListPayoutRequests(c, params)
}

// CreatePayoutRequest operation middleware
func (siw *ServerInterfaceWrapper) CreatePayoutRequest(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePayoutRequestParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePayoutRequest(c, params)
}

// GetPayoutRequest operation middleware
func (siw *ServerInterfaceWrapper) GetPayoutRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPayoutRequest(c, id)
}

// ArchivePayoutRequest operation middleware
func (siw *ServerInterfaceWrapper) ArchivePayoutRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ArchivePayoutRequest(c, id)
}

// GetListProducts operation middleware
func (siw *ServerInterfaceWrapper) GetListProducts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListProductsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetListProducts(c, params)
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateProductParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProduct(c, params)
}

// UpdateProduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateProduct(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateProductParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProduct(c, params)
}

// GetProduct operation middleware
func (siw *ServerInterfaceWrapper) GetProduct(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProduct(c, id)
}

// DisableProduct operation middleware
func (siw *ServerInterfaceWrapper) DisableProduct(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DisableProduct(c, id)
}

// GetListPurchaseRequests operation middleware
func (siw *ServerInterfaceWrapper) GetListPurchaseRequests(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListPurchaseRequestsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetListPurchaseRequests(c, params)
}

// CreatePurchaseRequest operation middleware
func (siw *ServerInterfaceWrapper) CreatePurchaseRequest(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePurchaseRequestParams

	// ------------- Required query parameter "model" -------------

	if paramValue := c.Query("model"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument model is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "model", c.Request.URL.Query(), &params.Model)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePurchaseRequest(c, params)
}

// GetPurchaseRequest operation middleware
func (siw *ServerInterfaceWrapper) GetPurchaseRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPurchaseRequest(c, id)
}

// ArchivePurchaseRequest operation middleware
func (siw *ServerInterfaceWrapper) ArchivePurchaseRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ArchivePurchaseRequest(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bank-accounts", wrapper.GetListBankAccounts)
	router.POST(options.BaseURL+"/bank-accounts", wrapper.CreateBankAccount)
	router.GET(options.BaseURL+"/bank-accounts/:login", wrapper.GetBankAccount)
	router.PUT(options.BaseURL+"/bank-accounts/:login", wrapper.UpdateBankAccount)
	router.PUT(options.BaseURL+"/bank-accounts/:login/change-funds", wrapper.ChangeBankAccountFunds)
	router.GET(options.BaseURL+"/discounts", wrapper.GetListDiscounts)
	router.POST(options.BaseURL+"/discounts", wrapper.CreateDiscount)
	router.PUT(options.BaseURL+"/discounts", wrapper.UpdateDiscount)
	router.GET(options.BaseURL+"/discounts/:id", wrapper.GetDiscount)
	router.PATCH(options.BaseURL+"/discounts/:id/end", wrapper.EndDiscount)
	router.GET(options.BaseURL+"/payments", wrapper.GetListPayments)
	router.POST(options.BaseURL+"/payments", wrapper.CreatePayment)
	router.GET(options.BaseURL+"/payments/:uuid", wrapper.GetPayment)
	router.GET(options.BaseURL+"/payout-requests", wrapper.GetListPayoutRequests)
	router.POST(options.BaseURL+"/payout-requests", wrapper.CreatePayoutRequest)
	router.GET(options.BaseURL+"/payout-requests/:id", wrapper.GetPayoutRequest)
	router.PUT(options.BaseURL+"/payout-requests/:id/archive", wrapper.ArchivePayoutRequest)
	router.GET(options.BaseURL+"/products", wrapper.GetListProducts)
	router.POST(options.BaseURL+"/products", wrapper.CreateProduct)
	router.PUT(options.BaseURL+"/products", wrapper.UpdateProduct)
	router.GET(options.BaseURL+"/products/:id", wrapper.GetProduct)
	router.PUT(options.BaseURL+"/products/:id/disable", wrapper.DisableProduct)
	router.GET(options.BaseURL+"/purchase-requests", wrapper.GetListPurchaseRequests)
	router.POST(options.BaseURL+"/purchase-requests", wrapper.CreatePurchaseRequest)
	router.GET(options.BaseURL+"/purchase-requests/:id", wrapper.GetPurchaseRequest)
	router.PUT(options.BaseURL+"/purchase-requests/:id/archive", wrapper.ArchivePurchaseRequest)
}
